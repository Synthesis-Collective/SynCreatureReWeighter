using System;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;

namespace CreatureReWeighter
{
    public class Program
    {
        static Lazy<CreatureReWeighterSettings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(nickname: "Settings", path: "settings.json", out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "CreatureReWeighter.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine($"Log Level = {(Settings.Value.VerboseMode ? "Verbose" : "Normal")}");

            WriteVerbose("CreatureReWeighter - RunPatch - START");

            // Output all race names.
            var raceGetters = state.LoadOrder.PriorityOrder.Race().WinningOverrides();
            var editorIds = raceGetters.Select(r => r.EditorID);

            WriteVerbose("CreatureReWeighter - Race IDs");

            foreach (var editorId in editorIds)
            {
                if (editorId != null)
                {
                    WriteVerbose(editorId);
                }
            }

            WriteVerbose("CreatureReWeighter - Processing NPCs");

            var npcGetters = state.LoadOrder.PriorityOrder.Npc().WinningOverrides();

            foreach (var npcGetter in npcGetters)
            {
                if (npcGetter.Race == null)
                {
                    WriteVerbose("CreatureReWeighter - Skipping NPC - No Race");
                    continue;
                }

                var race = npcGetter.Race.TryResolve(state.LinkCache);

                if (race == null || race.EditorID == null)
                {
                    continue;
                }

                var entry = Settings.Value.WeightByRace.FirstOrDefault(x => x.EditorId == race.EditorID);

                if (entry != null)
                {
                    WriteVerbose($"CreatureReWeighter - Processing NPC - {npcGetter.EditorID} ({race.EditorID})");

                    var npc = state.PatchMod.Npcs.GetOrAddAsOverride(npcGetter);
                    npc.Weight = entry.Weight;
                }
            }

            WriteVerbose("CreatureReWeighter - RunPatch - END");
        }

        private static void WriteVerbose(string message)
        {
            if (Settings.Value.VerboseMode)
            {
                Console.WriteLine(message);
            }
        }
    }
}
